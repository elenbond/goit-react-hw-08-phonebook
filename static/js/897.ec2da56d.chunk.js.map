{"version":3,"file":"static/js/897.ec2da56d.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.styled.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SectionStyled= styled.section`\n    padding: 50px 0;\n`;\n\nexport const Title = styled.h2`\n    font-size: 28px;\n    font-weight: 500;\n    text-align: center;\n    color: #E6DDC4;\n`;\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    padding: 0 15px;\n`;","import PropTypes from 'prop-types';\nimport { SectionStyled, Title, Container } from './Section.styled';\n\nconst Section = ({ title, children }) => { \n    return (\n        <SectionStyled>\n            <Container>\n                <Title>{title}</Title>\n                {children}\n            </Container>\n        </SectionStyled>\n    )\n}\n\nexport default Section;\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilter(state);\n\n    if (!filter) {\n        return contacts;\n    }\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const visibleContacts = contacts.filter(({ name, number }) => {\n        const normalizedName = name.toLocaleLowerCase();\n        const result = normalizedName.includes(normalizedFilter) || number.includes(normalizedFilter);\n        return result;\n    });\n    return visibleContacts;\n}","import styled from 'styled-components';\n\nexport const Form = styled.form`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    margin-top: 30px;\n    // width: 400px;\n`;\n\nexport const Label = styled.label`\n    display: flex;\n    flex-direction: column;\n    width: 300px;\n    height: 80px;\n    margin-bottom: 10px;\n    font-size: 20px;\n    color: #E6DDC4;\n`;\n\nexport const Input = styled.input`\n    margin-top: 10px;\n    height: 30px;\n`;\n\nexport const Button = styled.button`\n    font-size: 20px;\n    padding: 10px;\n    margin-top: 30px;\n    width: 200px;\n    color: #181D31;\n    background-color: #F0E9D2;\n    border: none;\n    border-radius: 5px;\n    &:hover, &:focus{\n        cursor: pointer;\n        color: #F0E9D2;\n        background-color: #181D31;\n    }\n`;","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\n// import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { addContact } from \"redux/contacts/contactsOperations\";\nimport { selectContacts } from \"redux/contacts/contactsSelectors\";\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\n\nexport const ContactForm = () => { \n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const contactNameId = nanoid();\n    const contactNumberId = nanoid();\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'name':\n                return setName(value);\n            case 'number':\n                return setNumber(value);\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (isExist({ name, number })) {\n            toast.error('This contact is already in your phonebook!');\n            return;\n        }\n        dispatch(addContact({ name, number }));\n        resetForm();\n        event.target.reset();\n    };\n\n    const isExist = ({ name, number }) => {\n        const normalizedName = name.toLowerCase();\n        const result = contacts.find(\n            contact => contact.name.toLowerCase() === normalizedName || contact.phone === number\n        );\n        return result;\n    };\n\n    const resetForm = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Label htmlFor={contactNameId}> Name\n                <Input\n                    type=\"text\"\n                    name=\"name\"\n                    id={contactNameId}\n                    value ={name}\n                    onChange = {handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </Label>\n            <Label htmlFor={contactNumberId}> Number \n                <Input\n                    type=\"tel\"\n                    name=\"number\"\n                    id={contactNumberId}\n                    value={number}\n                    onChange = {handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </Label>\n            <Button type=\"submit\">Add contact</Button>\n        </Form>\n    )\n}\n\nexport default ContactForm;\n\n// ContactForm.propTypes = {\n//     name: PropTypes.string,\n//     phone: PropTypes.string,\n// }","import styled from 'styled-components';\n\nexport const Label = styled.label`\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: center;\n    width: 300px;\n    height: 80px;\n    margin: o auto;\n    margin: 20px 0 10px 0;\n    font-size: 20px;\n    color: #E6DDC4;\n`;\n\nexport const Input = styled.input`\n    margin-top: 10px;\n    height: 30px;\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\nimport { Label, Input } from './Filter.styled';\n\nconst Filter = () => { \n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n    const id = nanoid();\n\n    const changeFilter = event => {\n        const { value } = event.target;\n        dispatch(setFilter( value ));\n    }\n\n    return (\n        <>\n            <Label> Find contact by name\n                <Input\n                    id={id}\n                    type=\"text\"\n                    value={filter}\n                    onChange={changeFilter}/>\n            </Label>\n        </>\n    )\n}\n\nexport default Filter;","import styled from 'styled-components';\n\nexport const Item = styled.li`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 18px;\n    color: #E6DDC4;\n    width: 400px;\n    margin-top: 15px;\n    &:first-child {\n        margin-top: 0;\n    }\n`;\n\nexport const Button = styled.button`\n    font-size: 16px;\n    padding: 7px 10px;\n    width: 100px;\n    color: #181D31;\n    background-color: #F0E9D2;\n    border: none;\n    border-radius: 5px;\n    &:hover, &:focus {\n        cursor: pointer;\n        color: #F0E9D2;\n        background-color: #181D31;\n    }\n`;","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport { Item, Button } from './ContactListItem.styled';\n\nconst ContactListItem = ({ id, name, number }) => { \n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    return (\n        <Item key={id}>{name} : {number}\n            <Button type='button' onClick={() => handleDeleteContact(id)}>\n                Delete\n            </Button>\n        </Item>\n    )\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n}","import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    // width: 300px;\n    margin-top: 20px;\n    // padding-bottom: 30px;\n`;","// import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contactsSelectors';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport { List } from './ContactList.styled';\n\n\nconst ContactList = () => { \n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <List>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </List>\n    )\n}\n\nexport default ContactList;\n\n// ContactList.propTypes = {\n//     contacts: PropTypes.arrayOf(PropTypes.shape({\n//         id: PropTypes.string,\n//         name: PropTypes.string.isRequired,\n//         phone: PropTypes.string.isRequired,\n//     }))\n// }","import { useSelector } from \"react-redux\";\nimport Section from \"components/Section/Section\";\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Loader } from \"components/Loader/Loader\";\nimport { selectContacts, selectIsLoading, selectError } from \"redux/contacts/contactsSelectors\";\n\n\nexport const Phonebook = () => {\n    const contacts = useSelector(selectContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    return (\n        <div>\n            <Section title=\"Phonebook\">\n                <ContactForm />\n            </Section>\n            <Section title=\"Contacts\">\n                <Filter />\n                {isLoading && !error && <Loader />}\n                {contacts.length > 0 && < ContactList />}\n                {contacts.length === 0 && !isLoading && (<p>You don't have any contacts yet(</p>) }\n            </Section>\n        </div>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Phonebook } from \"components/Phonebook/Phonebook\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <main>\n            <Phonebook />\n        </main>\n    );\n}\n\nexport default Contacts;"],"names":["SectionStyled","styled","Title","Container","title","children","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","normalizedFilter","toLocaleLowerCase","name","number","includes","Form","Label","Input","Button","useState","setName","setNumber","useSelector","dispatch","useDispatch","contactNameId","contactNumberId","handleChange","event","target","value","isExist","normalizedName","toLowerCase","find","contact","phone","resetForm","onSubmit","preventDefault","toast","addContact","reset","htmlFor","type","onChange","pattern","required","setFilter","Item","onClick","deleteContact","handleDeleteContact","List","visibleContacts","map","Phonebook","Loader","length","useEffect","fetchContacts"],"sourceRoot":""}