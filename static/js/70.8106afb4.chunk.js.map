{"version":3,"file":"static/js/70.8106afb4.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","redux/contacts/contactsSelectors.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\"};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ title, children }) => { \n    return (\n        <section className={css.section}>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    )\n}\n\nexport default Section;\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}","export const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectVisibleContacts = state => {\n    const contacts = selectContacts(state);\n    const filter = selectFilter(state);\n\n    if (!filter) {\n        return contacts;\n    }\n    const normalizedFilter = filter.toLocaleLowerCase();\n    const visibleContacts = contacts.filter(({ name, phone }) => {\n        const normalizedName = name.toLocaleLowerCase();\n        const result = normalizedName.includes(normalizedFilter) || phone.includes(normalizedFilter);\n        return result;\n    });\n    return visibleContacts;\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { nanoid } from \"nanoid\";\n// import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { addContact } from \"redux/contacts/contactsOperations\";\nimport { selectContacts } from \"redux/contacts/contactsSelectors\";\nimport css from './ContactForm.module.css';\n\nexport const ContactForm = () => { \n\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const contacts = useSelector(selectContacts);\n    const dispatch = useDispatch();\n\n    const contactNameId = nanoid();\n    const contactNumberId = nanoid();\n\n    const handleChange = event => {\n        const { name, value } = event.target;\n        switch (name) {\n            case 'name':\n                return setName(value);\n            case 'number':\n                return setNumber(value);\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n        if (isExist({ name, number })) {\n            toast.error('This contact is already in your phonebook!');\n            return;\n        }\n        dispatch(addContact({ name, number }));\n        resetForm();\n        event.target.reset();\n    };\n\n    const isExist = ({ name, number }) => {\n        const normalizedName = name.toLowerCase();\n        const result = contacts.find(\n            contact => contact.name.toLowerCase() === normalizedName || contact.phone === number\n        );\n        return result;\n    };\n\n    const resetForm = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={css.form}>\n            <label htmlFor={contactNameId} className={css.label}> Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id={contactNameId}\n                    value ={name}\n                    onChange = {handleChange}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    className={css.input}\n                />\n            </label>\n            <label htmlFor={contactNumberId} className={css.label}> Number \n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    id={contactNumberId}\n                    value={number}\n                    onChange = {handleChange}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    className={css.input}\n                />\n            </label>\n            <button type=\"submit\" className={css.button}>Add contact</button>\n        </form>\n    )\n}\n\nexport default ContactForm;\n\n// ContactForm.propTypes = {\n//     name: PropTypes.string,\n//     phone: PropTypes.string,\n// }","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\"};","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { setFilter } from 'redux/contacts/filtersSlice';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\nimport css from './Filter.module.css';\n\nconst Filter = () => { \n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n    const id = nanoid();\n\n    const changeFilter = event => {\n        const { value } = event.target;\n        dispatch(setFilter( value ));\n    }\n\n    return (\n        <label className={css.filter}> Find contact by name\n            <input\n                id={id}\n                type=\"text\"\n                value={filter}\n                onChange={changeFilter}/>\n        </label>\n    )\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list_item\":\"ContactListItem_list_item__mLK5h\"};","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport css from './ContactListItem.module.css';\n\nconst ContactListItem = ({ id, name, number }) => { \n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    return (\n        <li key={id} className={css.list_item}>{name} : {number}\n            <button type='button' onClick={() => handleDeleteContact(id)}>\n                Delete\n            </button>\n        </li>\n    )\n}\n\nexport default ContactListItem;\n\nContactListItem.propTypes = {\n    id: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","// import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport { selectVisibleContacts } from 'redux/contacts/contactsSelectors';\nimport ContactListItem from '../ContactListItem/ContactListItem';\nimport css from './ContactList.module.css';\n\n\nconst ContactList = () => { \n    const visibleContacts = useSelector(selectVisibleContacts);\n\n    return (\n        <ul className={css.list}>\n            {visibleContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    number={number}\n                />\n            ))}\n        </ul>\n    )\n}\n\nexport default ContactList;\n\n// ContactList.propTypes = {\n//     contacts: PropTypes.arrayOf(PropTypes.shape({\n//         id: PropTypes.string,\n//         name: PropTypes.string.isRequired,\n//         phone: PropTypes.string.isRequired,\n//     }))\n// }","import { InfinitySpin } from 'react-loader-spinner';\n\nexport const Loader = () => {\n    return (\n        <InfinitySpin \n            width='200'\n            color=\"#4fa94d\"\n        />\n    )\n}","import { useSelector } from \"react-redux\";\nimport Section from \"components/Section/Section\";\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport Filter from 'components/Filter/Filter';\nimport ContactList from 'components/ContactList/ContactList';\nimport { Loader } from \"components/Loader/Loader\";\nimport { selectContacts, selectIsLoading, selectError } from \"redux/contacts/contactsSelectors\";\n\n\nexport const Phonebook = () => {\n    const contacts = useSelector(selectContacts);\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    return (\n        <div>\n            <Section title=\"Phonebook\">\n                <ContactForm />\n            </Section>\n            <Section title=\"Contacts\">\n                <Filter />\n                {isLoading && !error && <Loader />}\n                {contacts.length > 0 && < ContactList />}\n                {contacts.length === 0 && !isLoading && (<p>You don't have any contacts yet(</p>) }\n            </Section>\n        </div>\n    )\n}","import { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Phonebook } from \"components/Phonebook/Phonebook\";\nimport { fetchContacts } from \"redux/contacts/contactsOperations\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return <Phonebook />;\n}\n\nexport default Contacts;"],"names":["title","children","className","css","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectVisibleContacts","normalizedFilter","toLocaleLowerCase","name","phone","includes","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","contactNameId","nanoid","contactNumberId","handleChange","event","target","value","isExist","normalizedName","toLowerCase","find","contact","resetForm","onSubmit","preventDefault","toast","addContact","reset","htmlFor","type","id","onChange","pattern","required","setFilter","onClick","deleteContact","handleDeleteContact","visibleContacts","map","Loader","width","color","Phonebook","length","useEffect","fetchContacts"],"sourceRoot":""}